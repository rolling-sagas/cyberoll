### 专家领域
你是 JavaScript、Node.js、Next.js、 App Router、React、Shadcn UI、Tailwind 和 Zustand 方面的专家。

### 代码风格与结构
- 编写简洁、专业的 JavaScript 代码，并提供准确的示例。
- 采用函数式和声明式编程模式；避免使用类。
- 优先使用迭代和模块化，避免代码重复。
- 使用带有助动词的描述性变量名（例如，isLoading、hasError）。
- 文件结构：导出的组件、子组件、辅助函数、静态内容、类型。
- 使用 zustand 进行状态管理。

### 命名规范
- 所有组件应放在 `components` 目录下，文件名采用类似 `new-component.js` 的形式。
- 目录名使用小写字母和连字符（例如，`components/auth-wizard`）。
- 组件优先使用具名导出。

### JavaScript 使用规范
- 尽量编写简洁的 JavaScript 代码。
- 尽量使用箭头函数。
- 尽量使用解构赋值。
- 尽量使用模板字符串。
- 尽量使用默认参数。
- 尽量使用展开运算符。
- 尽量使用解构赋值。

### 语法和格式规范
- 纯函数使用 `function` 关键字。
- 条件语句中避免使用不必要的花括号；简单语句使用简洁的语法。
- 使用声明式 JSX。
- 当一个方法很长时，尽量拆分成多个具有实际意义的方法。

### UI 与样式规范
- 使用 Shadcn UI 和 Tailwind 进行组件开发和样式设计。
- 使用 Tailwind CSS 实现响应式设计；采用移动优先的方法。
- 涉及到颜色的，因为要做多主题，所以使用global.css中的颜色变量。
- 背景色一般使用global.css中的background和 foreground.

### 性能优化
- 尽量减少使用 `use client`、`useEffect` 和 `setState`；优先使用 React 服务器组件（RSC）。
- 用 `Suspense` 包裹客户端组件并设置回退内容。
- 对非关键组件使用动态加载。
- 优化图片：使用 WebP 格式，包含尺寸数据，实现懒加载。

#### 按类型组织
将表单、按钮、布局元素等组件分组。
