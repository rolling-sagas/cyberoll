generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// AUTH TABLES
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  credits           Credits[]

  stripeCustomer    StripeCustomer?
  appleCustomer     AppleCustomer?

  subscriptionNotifications SubscriptionNotification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// PAYMENT TABLES
model Credits {
  id           Int      @id @default(autoincrement())
  userId       String
  type         String
  value        Int
  changeReason String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StripeCustomer {
  userId     String   @unique
  customerId String   @unique // Single customer mode

  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AppleCustomer {
  userId     String   @unique
  appAccountToken String   @unique @default(uuid()) // Single customer mode

  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubscriptionNotification {
  id         String   @id
  userId     String
  platform   String
  status     Int
  raw        String   // raw JSON string

  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Story {
  id          String        @id
  name        String
  cover       String?
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author      String
  keepPrivate Boolean       @default(false)
  template    String?
  chapters     Chapter[]
  comments     Comment[]
  sessions StorySession[]
  occupations  Occupation[]
  user        User          @relation(fields: [author], references: [id], onDelete: Cascade)
}

model Chapter {
  id           String        @id
  name         String
  initial      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  description  String?
  story        String
  maxTurns     Int
  nextChapter  String
  first        Boolean
  previous     String?
  cover        String?
  rulesChunk   String?
  story        Story         @relation(fields: [story], references: [id], onDelete: Cascade)
  sessions  StorySession[]
  messages     Message[]
}

model Occupation {
  id        String   @id
  story     String?
  name      String
  stats     String?
  skills    String?
  items     String?
  backstory String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cover     String?
  Story     Story?   @relation(fields: [story], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  commentBy String?
  content   String
  story     String?
  user      User?    @relation(fields: [commentBy], references: [id], onDelete: Cascade)
  story     Story?   @relation(fields: [story], references: [id], onDelete: Cascade)
}

model StorySession {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  story      String
  stats      String
  skills     String
  player     String
  items      String?
  name       String
  age        Int
  backstory  String?
  occupation String?
  storyName  String?
  chapter     String?
  user        User      @relation(fields: [player], references: [id])
  chapter     Chapter?  @relation(fields: [chapter], references: [id])
  story       Story     @relation(fields: [story], references: [id])
  messages    Message[]
}

model Like {
  createdAt DateTime @default(now())
  likedBy   String
  story     String

  @@id([likedBy, story])
}

model Message {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  role        String
  content     String
  template    String?
  entry       Boolean      @default(false)
  chapter     String
  hash        String?
  gameSession Int?
  author      String?
  user        User?        @relation(fields: [author], references: [id], onDelete: Cascade)
  storySession StorySession? @relation(fields: [gameSession], references: [id])
  chapter     Chapter      @relation(fields: [chapter], references: [id], onDelete: Cascade)
}
